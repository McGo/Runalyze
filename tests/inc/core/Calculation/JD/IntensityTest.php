<?php

namespace Runalyze\Calculation\JD;

use Runalyze\Model\Activity;
use Runalyze\Model\Trackdata;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-11-27 at 17:51:36.
 */
class IntensityTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Intensity
	 */
	protected $object;

	protected function setUp() {
		Intensity::setHRmax(200);

		$this->object = new Intensity;
	}

	public function testTableValues() {
		$ExpectedValues = array(
			65	=> 6.0,
			66	=> 6.6,
			67	=> 7.3,
			68	=> 8.1,
			69	=> 9.0,
			70	=> 10.0,
			71	=> 11.0,
			72	=> 12.0,
			73	=> 13.0,
			74	=> 14.0,
			75	=> 15.0,
			76	=> 17.0,
			77	=> 18.0,
			78	=> 19.0,
			79	=> 20.0,
			80	=> 21.0,
			81	=> 22.0,
			82	=> 23.5,
			83	=> 25.0,
			84	=> 26.5,
			85	=> 28.0,
			86	=> 29.5,
			87	=> 31.0,
			88	=> 33.0,
			89	=> 35.0,
			90	=> 37.0,
			91	=> 39.0,
			92	=> 41.0,
			93	=> 43.4,
			94	=> 45.8,
			95	=> 48.0,
			96	=> 50.4,
			97	=> 53.0,
			98	=> 55.0,
			99	=> 57.7,
			100	=> 60.0
		);

		$seconds = 60*60;
		$hrMax = 200;
		Intensity::setHRmax($hrMax);

		foreach ($ExpectedValues as $hr => $value) {
			$realValue = $this->object->calculateByHeartrateAverage($hrMax*$hr/100, $seconds);
			$this->assertEquals( $value, $realValue, 'Intensity for '.$hr.'%HF differs too much: '.$realValue.' instead of '.$value, $value*0.2 );
		}
	}

	public function testSetHRmax() {
		Intensity::setHRmax(100);
		$value1 = $this->object->calculateByHeartrateAverage(75, 3600);
		Intensity::setHRmax(200);
		$value2 = $this->object->calculateByHeartrateAverage(150, 3600);

		$this->assertEquals($value1, $value2);
	}

	public function testValue() {
		$value = $this->object->calculateByHeartrateAverage(90, 3600);

		$this->assertEquals($value, $this->object->value());
	}

	public function testActivityHR() {
		$activity = new Activity\Entity(array(
			Activity\Entity::HR_AVG => 150,
			Activity\Entity::TIME_IN_SECONDS => 3600
		));

		$this->assertEquals($this->object->calculateByHeartrateAverage(150,3600), $this->object->calculateByActivity($activity));
	}

	public function testActivityPace() {
		Intensity::setVDOTshape(50);

		$activity = new Activity\Entity(array(
			Activity\Entity::DISTANCE => 12,
			Activity\Entity::TIME_IN_SECONDS => 3600
		));

		// VDOT 50 => vVDOT ca. 3:50
		// 5:00 => 77 %vVDOT => 82 %HRmax => 24 points/hour
		$this->assertEquals(24, $this->object->calculateByActivity($activity));
	}

	public function testTrackdataWithTime() {
		$trackdata = new Trackdata\Entity(array(
			Trackdata\Entity::HEARTRATE => array(140, 150),
			Trackdata\Entity::TIME => array(1800, 3600)
		));

		$expected = $this->object->calculateByHeartrateAverage(140, 1800)
				+ $this->object->calculateByHeartrateAverage(150, 1800);

		$this->assertEquals($expected, $this->object->calculateByTrackdata($trackdata));
	}

}
