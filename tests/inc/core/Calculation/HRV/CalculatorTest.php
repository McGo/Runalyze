<?php

namespace Runalyze\Calculation\HRV;

use Runalyze\Model\HRV\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2015-07-08 at 17:41:54.
 */
class CalculatorTest extends \PHPUnit_Framework_TestCase {

	public function testSimpleExample() {
		$Calculator = new Calculator(new Entity(array(
			Entity::DATA => array(
				500, 510, 530, 550, 560
			)
		)));
		$Calculator->calculate();

		$this->assertEquals(530, $Calculator->mean());
		$this->assertEquals(25.5, $Calculator->SDNN(), '', 0.1);
		// sqrt( (20^2 + 10^2 + 0^2 + 10^2 + 20^2 ) / 4 ) = sqrt(1000/4) = sqrt(250) = 15.8
		$this->assertEquals(15.8, $Calculator->RMSSD(), '', 0.1);
		// sqrt( (5^2 + 5^2 + 5^2 + 5^2 ) / 3 ) = sqrt(100/3) = sqrt(33.3) = 5.77
		$this->assertEquals(5.77, $Calculator->SDSD(), '', 0.1);
	}

	public function test5minAverages() {
		// This should generate averages of 1000/1010/1020/1030/1040 for five 5-min-intervals
		$data = array();
		for ($interval = 0; $interval < 5; ++$interval) {
			$value = 1000 + $interval * 10;

			for ($sum = $value; $sum <= 300*1000; $sum += $value) {
				$data[] = $value;
			}

			$data[] = $value;
		}

		$Calculator = new Calculator(new Entity(array(
			Entity::DATA => $data
		)));
		$Calculator->calculate();

		// sqrt( (20^2 + 10^2 + 0^2 + 10^2 + 20^2 ) / 4 ) = sqrt(1000/4) = sqrt(250) = 15.8
		$this->assertEquals(15.8, $Calculator->SDANN(), '', 0.1);
	}

	public function testCountings() {
		$Calculator = new Calculator(new Entity(array(
			Entity::DATA => array(500, 510, 550, 650, 610, 510, 500, 500, 400, 500)
		)));
		$Calculator->calculate();

		$this->assertEquals(6/10, $Calculator->pNN20());
		$this->assertEquals(4/10, $Calculator->pNN50());
	}

	public function testFiltering() {
		$CalculatorDefaultFilter = new Calculator(new Entity(array(
			Entity::DATA => array(50, 100, 150, 250, 300, 350)
		)));
		$CalculatorDefaultFilter->calculate();
		$this->assertEquals(300, $CalculatorDefaultFilter->mean());

		$CalculatorWithoutFilter = new Calculator(new Entity(array(
			Entity::DATA => array(50, 100, 150, 250, 300, 350)
		)), array());
		$CalculatorWithoutFilter->calculate();
		$this->assertEquals(200, $CalculatorWithoutFilter->mean());

		$CalculatorWithSpecialFilter = new Calculator(new Entity(array(
			Entity::DATA => array(50, 100, 150, 250, 300, 350)
		)), array(75, 175));
		$CalculatorWithSpecialFilter->calculate();
		$this->assertEquals(125, $CalculatorWithSpecialFilter->mean());
	}

}
