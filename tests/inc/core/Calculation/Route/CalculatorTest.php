<?php

namespace Runalyze\Calculation\Route;

use Runalyze\Model\Route;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2015-01-17 at 19:26:39.
 */
class CalculatorTest extends \PHPUnit_Framework_TestCase {

	public function testCalculatorForEmptyData() {
		$Route = new Route\Entity(array(
			Route\Entity::ELEVATIONS_ORIGINAL => array(),
			Route\Entity::ELEVATIONS_CORRECTED => array(),
			Route\Entity::ELEVATION => 123,
			Route\Entity::ELEVATION_UP => 123,
			Route\Entity::ELEVATION_DOWN => 123
		));
		$Calc = new Calculator($Route);
		$Calc->calculateElevation();

		$this->assertEquals(0, $Route->elevation());
		$this->assertEquals(0, $Route->elevationUp());
		$this->assertEquals(0, $Route->elevationDown());

		$this->assertFalse($Calc->tryToCorrectElevation());
		$this->assertEmpty($Route->elevationsOriginal());
		$this->assertEmpty($Route->elevationsCorrected());
		$this->assertEmpty($Route->get(Route\Entity::ELEVATIONS_SOURCE));
	}

	public function testCalculationFromOriginalData() {
		$Route = new Route\Entity(array(
			Route\Entity::ELEVATIONS_ORIGINAL => array(100, 120, 150, 140),
			Route\Entity::ELEVATIONS_CORRECTED => array()
		));
		$Calc = new Calculator($Route);
		$Calc->calculateElevation();

		$this->assertGreaterThan(0, $Route->elevation());
		$this->assertGreaterThan(0, $Route->elevationUp());
		$this->assertGreaterThan(0, $Route->elevationDown());
	}

	public function testCalculationFromCorrectedData() {
		$Route = new Route\Entity(array(
			Route\Entity::ELEVATIONS_ORIGINAL => array(100, 100, 100, 100),
			Route\Entity::ELEVATIONS_CORRECTED => array(100, 120, 150, 140)
		));
		$Calc = new Calculator($Route);
		$Calc->calculateElevation();

		$this->assertGreaterThan(0, $Route->elevation());
		$this->assertGreaterThan(0, $Route->elevationUp());
		$this->assertGreaterThan(0, $Route->elevationDown());
	}

	public function testCorrection() {
		$Route = new Route\Entity();
		$Route->setLatitudesLongitudes(
			array(49.440, 49.441, 49.442, 49.443, 49.444, 49.445, 49.446, 49.447, 49.448, 49.449, 49.450),
			array(7.760, 7.761, 7.762, 7.763, 7.764, 7.765, 7.766, 7.767, 7.768, 7.769, 7.770)
		);
		$Calc = new Calculator($Route);

		if ($Calc->tryToCorrectElevation()) {
			$this->assertEmpty($Route->elevationsOriginal());
			$this->assertNotEmpty($Route->elevationsCorrected());
			$this->assertNotEmpty($Route->get(Route\Entity::ELEVATIONS_SOURCE));
		} else {
			$this->markTestSkipped('No elevation correction was available.');
		}
	}

	public function testRemoveCorrectedData() {
		$Route = new Route\Entity(array(
			Route\Entity::ELEVATIONS_ORIGINAL => array(100, 100, 100, 100),
			Route\Entity::ELEVATIONS_CORRECTED => array(100, 120, 150, 140),
			Route\Entity::ELEVATIONS_SOURCE => 'foobar'
		));
		$Calc = new Calculator($Route);
		$Calc->removeElevationCorrection();

		$this->assertNotEmpty($Route->elevationsOriginal());
		$this->assertEmpty($Route->elevationsCorrected());
		$this->assertEquals('', $Route->elevationsSource());
	}

}
