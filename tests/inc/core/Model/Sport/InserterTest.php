<?php

namespace Runalyze\Model\Sport;

use PDO;

class InvalidInserterObjectForSport_MockTester extends \Runalyze\Model\Entity {
	public function properties() {
		return array('foo');
	}
}

/**
 * Generated by hand
 */
class InserterTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var \PDO
	 */
	protected $PDO;

	protected function setUp() {
		$this->PDO = new PDO('sqlite::memory:');
		$this->PDO->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		$this->PDO->exec('CREATE TABLE IF NOT EXISTS `'.PREFIX.'sport` (
			`id` INTEGER PRIMARY KEY AUTOINCREMENT,
			`name` VARCHAR(50) NOT NULL,
			`img` VARCHAR(50) NOT NULL,
			`short` TINYINT NOT NULL,
			`kcal` SMALLINT NOT NULL,
			`HFavg` SMALLINT NOT NULL,
			`distances` SMALLINT NOT NULL,
			`speed` VARCHAR(10) NOT NULL,
			`power` TINYINT NOT NULL,
			`outside` TINYINT NOT NULL,
			`main_equipmenttypeid` INTEGER NOT NULL,
			`accountid` INTEGER NOT NULL
			);
		');
	}

	protected function tearDown() {
		$this->PDO->exec('DROP TABLE `'.PREFIX.'sport`');
	}

	public function testWrongObject() {
	    if (PHP_MAJOR_VERSION >= 7) $this->setExpectedException('TypeError'); else $this->setExpectedException('\PHPUnit_Framework_Error');
		new Inserter($this->PDO, new InvalidInserterObjectForSport_MockTester);
	}

	public function testSimpleInsert() {
		$Object = new Entity(array(
			Entity::NAME => 'Sport name',
			Entity::SHORT => 0,
			Entity::CALORIES_PER_HOUR => 700,
			Entity::HR_AVG => 140,
			Entity::HAS_DISTANCES => 1,
			Entity::PACE_UNIT => 'foo',
			Entity::HAS_POWER => 0,
			Entity::IS_OUTSIDE => 1
		));

		$Inserter = new Inserter($this->PDO, $Object);
		$Inserter->setAccountID(1);
		$Inserter->insert();

		$data = $this->PDO->query('SELECT * FROM `'.PREFIX.'sport` WHERE `accountid`=1')->fetch(PDO::FETCH_ASSOC);
		$Sport = new Entity($data);

		$this->assertEquals('Sport name', $Sport->name());
		$this->assertEquals(700, $Sport->caloriesPerHour());
		$this->assertEquals(140, $Sport->avgHR());
		$this->assertEquals('foo', $Sport->paceUnitEnum());

		$this->assertTrue($Sport->hasDistances());
		$this->assertTrue($Sport->isOutside());

		$this->assertFalse($Sport->usesShortDisplay());
		$this->assertFalse($Sport->hasPower());
	}

}
