<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-10 at 17:21:17.
 */
class ImporterFiletypeKMLTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var ImporterFiletypeSLF
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new ImporterFiletypeKML;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() { }

	/**
	 * Test: empty string
	 */
	public function testEmptyString() {
		$this->object->parseString('');

		$this->assertTrue( $this->object->failed() );
		$this->assertEmpty( $this->object->objects() );
		$this->assertNotEmpty( $this->object->getErrors() );
	}

	/**
	 * Test: incorrect xml-file 
	 */
	public function test_notKML() {
		$this->object->parseString('<any><xml><file></file></xml></any>');

		$this->assertTrue( $this->object->failed() );
		$this->assertEmpty( $this->object->objects() );
		$this->assertNotEmpty( $this->object->getErrors() );
	}

	/**
	 * Test: standard file
	 * Filename: "TomTom.kml" 
	 */
	public function test_standardFileFromTomTom() {
		$this->object->parseFile('../tests/testfiles/kml/TomTom.kml');

		$this->assertFalse( $this->object->hasMultipleTrainings() );
		$this->assertFalse( $this->object->failed() );

		$this->assertEquals( 3637, $this->object->object()->getTimeInSeconds() );
		$this->assertEquals( 3788, $this->object->object()->getElapsedTime() );
		$this->assertEquals( 12.816, $this->object->object()->getDistance(), '', 0.1);
		$this->assertEquals( 808, $this->object->object()->getCalories(), '', 10);

		$this->assertTrue( $this->object->object()->hasArrayAltitude() );
		$this->assertTrue( $this->object->object()->hasArrayDistance() );
		$this->assertTrue( $this->object->object()->hasArrayLatitude() );
		$this->assertTrue( $this->object->object()->hasArrayLongitude() );
		$this->assertTrue( $this->object->object()->hasArrayTime() );
	}

	/**
	 * Test: standard file without explicit distance
	 * Filename: "TomTom-without-distance-extension.kml" 
	 */
	public function testFileFromTomTomWithoutDistance() {
		$this->object->parseFile('../tests/testfiles/kml/TomTom-without-distance-extension.kml');

		$this->assertFalse( $this->object->hasMultipleTrainings() );
		$this->assertFalse( $this->object->failed() );

		$this->assertEquals( 5*60*60 + 51*60 + 51, $this->object->object()->getTimeInSeconds() );
		$this->assertEquals( 12.816, $this->object->object()->getDistance(), '', 0.1);

		$this->assertTrue( $this->object->object()->hasArrayLatitude() );
		$this->assertTrue( $this->object->object()->hasArrayLongitude() );
		$this->assertTrue( $this->object->object()->hasArrayDistance() );
		$this->assertTrue( $this->object->object()->hasArrayTime() );
	}

	/**
	 * Test: standard route
	 * Filename: "Route-only.kml" 
	 */
	public function testStandardKMLroute() {
		$this->object->parseFile('../tests/testfiles/kml/Route-only.kml');

		$this->assertFalse( $this->object->hasMultipleTrainings() );
		$this->assertFalse( $this->object->failed() );

		$this->assertEquals(0.4, $this->object->object()->getDistance(), '', 0.05);

		$this->assertTrue( $this->object->object()->hasArrayAltitude() );
		$this->assertTrue( $this->object->object()->hasArrayDistance() );
		$this->assertTrue( $this->object->object()->hasArrayLatitude() );
		$this->assertTrue( $this->object->object()->hasArrayLongitude() );

		$this->assertFalse( $this->object->object()->hasArrayTime() );
	}

	/**
	 * Test: multi line route without altitude
	 * Filename: "multi-line-without-altitude.kml"
	 */
	public function testMultiLineWithoutAltitude() {
		$this->object->parseFile('../tests/testfiles/kml/multi-line-without-altitude.kml');

		$this->assertFalse( $this->object->hasMultipleTrainings() );
		$this->assertFalse( $this->object->failed() );

		$this->assertEquals(2.25, $this->object->object()->getDistance(), '', 0.05);

		$this->assertTrue( $this->object->object()->hasArrayDistance() );
		$this->assertTrue( $this->object->object()->hasArrayLatitude() );
		$this->assertTrue( $this->object->object()->hasArrayLongitude() );

		$this->assertFalse( $this->object->object()->hasArrayAltitude() );
		$this->assertFalse( $this->object->object()->hasArrayTime() );
	}
}
