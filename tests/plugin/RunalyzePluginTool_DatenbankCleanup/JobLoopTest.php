<?php

namespace Runalyze\Plugin\Tool\DatabaseCleanup;

require_once FRONTEND_PATH.'../plugin/RunalyzePluginTool_DatenbankCleanup/Job.php';
require_once FRONTEND_PATH.'../plugin/RunalyzePluginTool_DatenbankCleanup/JobLoop.php';

use Runalyze\Configuration;
use DB;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-12-01 at 21:29:05.
 */
class JobLoopTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var \PDO
	 */
	protected $PDO;

	protected function setUp() {
		$this->PDO = DB::getInstance();
		$this->PDO->exec('TRUNCATE TABLE `runalyze_route`');
		$this->PDO->exec('TRUNCATE TABLE `runalyze_trackdata`');
		$this->PDO->exec('DELETE FROM `runalyze_training`');

		$_POST = array();
	}
	protected function tearDown() {
		$this->PDO->exec('TRUNCATE TABLE `runalyze_route`');
		$this->PDO->exec('TRUNCATE TABLE `runalyze_trackdata`');
		$this->PDO->exec('DELETE FROM `runalyze_training`');

		$_POST = array();
	}

	public function testNoLoopForSingleActivity() {
		$this->PDO->exec(
			'INSERT INTO `runalyze_training` (`id`, `distance`, `s`, `pulse_avg`, `sportid`, `accountid`) '.
			'VALUES (1, 10, 3600, 150, '.Configuration::General()->runningSport().', 0)'
		);

		$Loop = new JobLoop;
		$Loop->run();

		$data = $this->PDO->query('SELECT * FROM `runalyze_training` WHERE `id`=1 LIMIT 1')->fetch();
		$this->assertEquals(0, $data['elevation']);
		$this->assertEquals(0, $data['vdot']);
		$this->assertEquals(0, $data['vdot_by_time']);
		$this->assertEquals(0, $data['vdot_with_elevation']);
		$this->assertEquals(0, $data['jd_intensity']);
		$this->assertEquals(0, $data['trimp']);
	}

	public function testCompleteLoopForSingleActivity() {
		$this->PDO->exec(
			'INSERT INTO `runalyze_training` (`id`, `distance`, `s`, `pulse_avg`, `sportid`, `accountid`) '.
			'VALUES (1, 10, 3600, 150, '.Configuration::General()->runningSport().', 0)'
		);

		$_POST = array(
			JobLoop::ELEVATION => 'on',
			JobLoop::ELEVATION_OVERWRITE => 'on',
			JobLoop::VDOT => 'on',
			JobLoop::JD_POINTS => 'on',
			JobLoop::TRIMP => 'on'
		);

		$Loop = new JobLoop;
		$Loop->run();

		$data = $this->PDO->query('SELECT * FROM `runalyze_training` WHERE `id`=1 LIMIT 1')->fetch();
		$this->assertNotEquals(0, $data['vdot']);
		$this->assertNotEquals(0, $data['vdot_by_time']);
		$this->assertNotEquals(0, $data['vdot_with_elevation']);
		$this->assertNotEquals(0, $data['jd_intensity']);
		$this->assertNotEquals(0, $data['trimp']);
	}

	public function testDontOverwriteElevation() {
		$this->PDO->exec('INSERT INTO `runalyze_training` (`id`, `distance`, `s`, `elevation`, `routeid`, `accountid`) VALUES (1, 10, 3600, 42, 1, 0)');
		$this->PDO->exec('INSERT INTO `runalyze_route` (`id`, `elevation`, `elevation_up`, `elevation_down`, `accountid`) VALUES (1, 123, 123, 123, 0)');

		$_POST = array(
			JobLoop::ELEVATION => 'on',
			JobLoop::ELEVATION_OVERWRITE => 'on'
		);

		$Loop = new JobLoop;
		$Loop->run();

		$this->assertEquals(42, $this->PDO->query(
			'SELECT `elevation` FROM `runalyze_training` WHERE `id`=1 LIMIT 1'
		)->fetchColumn());
	}

	public function testUsageOfCorrectElevation() {
		$this->PDO->exec(
			'INSERT INTO `runalyze_training` (`id`, `routeid`, `distance`, `s`, `pulse_avg`, `sportid`, `accountid`) '.
			'VALUES (1, 2, 10, 3600, 150, '.Configuration::General()->runningSport().', 0)'
		);
		$this->PDO->exec(
			'INSERT INTO `runalyze_training` (`id`, `routeid`, `distance`, `s`, `pulse_avg`, `sportid`, `accountid`) '.
			'VALUES (2, 1, 10, 3600, 150, '.Configuration::General()->runningSport().', 0)'
		);
		$this->PDO->exec('INSERT INTO `runalyze_route` (`id`, `elevations_corrected`, `accountid`) VALUES (1, "0|100", 0)');
		$this->PDO->exec('INSERT INTO `runalyze_route` (`id`, `elevations_corrected`, `accountid`) VALUES (2, "200|0", 0)');

		$_POST = array(
			JobLoop::ELEVATION => 'on',
			JobLoop::ELEVATION_OVERWRITE => 'on',
			JobLoop::VDOT => 'on'
		);

		$Loop = new JobLoop;
		$Loop->run();

		$DataDown = $this->PDO->query('SELECT `elevation`, `vdot`, `vdot_with_elevation` FROM `runalyze_training` WHERE `id`=1 LIMIT 1')->fetch();
		$DataUp = $this->PDO->query('SELECT `elevation`, `vdot`, `vdot_with_elevation` FROM `runalyze_training` WHERE `id`=2 LIMIT 1')->fetch();

		$this->assertEquals($DataUp['vdot'], $DataDown['vdot']);
		$this->assertEquals(100, $DataUp['elevation']);
		$this->assertEquals(200, $DataDown['elevation']);
		$this->assertGreaterThan($DataDown['vdot_with_elevation'], $DataUp['vdot_with_elevation']);
	}

	public function testIgnoreVDOTforNotRunning() {
		$this->PDO->exec(
			'INSERT INTO `runalyze_training` (`id`, `distance`, `s`, `pulse_avg`, `sportid`, `accountid`) '.
			'VALUES (1, 10, 3600, 150, '.(Configuration::General()->runningSport() + 1).', 0)'
		);

		$_POST = array(
			JobLoop::VDOT => 'on',
			JobLoop::JD_POINTS => 'on',
			JobLoop::TRIMP => 'on'
		);

		$Loop = new JobLoop;
		$Loop->run();

		$data = $this->PDO->query('SELECT * FROM `runalyze_training` WHERE `id`=1 LIMIT 1')->fetch();
		$this->assertEquals(0, $data['vdot']);
		$this->assertEquals(0, $data['vdot_by_time']);
		$this->assertEquals(0, $data['vdot_with_elevation']);
		$this->assertEquals(0, $data['jd_intensity']);
		$this->assertNotEquals(0, $data['trimp']);
	}

}
